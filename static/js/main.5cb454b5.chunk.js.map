{"version":3,"sources":["components/Wrapper/index.tsx","components/Contact/index.tsx","components/AddBtn.tsx","components/List/index.tsx","utils/API.tsx","components/Display/index.tsx","components/AddContactModal/index.tsx","components/AddEmailModal/index.tsx","App.tsx","index.tsx"],"names":["Wrapper","children","className","Contact","user","handleCurrentContact","tabIndex","onClick","firstName","lastName","AddBtn","handleOpen","Button","fontSize","List","getContacts","a","axios","get","addContact","newContact","headers","post","editContact","id","editContactData","put","deleteContact","delete","Display","currentContact","setCurrentContact","handleOpenEmail","contactEmail","emails","onSubmit","e","preventDefault","then","res","window","location","reload","catch","err","console","log","value","onChange","target","map","email","emailIdx","type","shift","AddContactModal","handleClose","openContact","useState","setNewContact","newEmail","setNewEmail","name","required","pushEmailArray","push","pushEmail","AddEmailModal","setOpenEmail","openEmail","App","userData","setUserData","sortedDataArray","sort","b","userA","toUpperCase","userB","clickedContact","setOpenContact","useEffect","data","contacts","exact","path","userIdx","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5cb454b5.chunk.js","sourcesContent":["import './Wrapper.css'\r\n\r\ntype Props = {\r\n  children: any\r\n}\r\n\r\nconst Wrapper: React.FC<Props> = ({ children }) => {\r\n  return (\r\n    <div className='wrapper'>\r\n      {children}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Wrapper;","import { CurrentContactType } from '../../App'\r\nimport './Contact.css'\r\n\r\ntype Props = {\r\n  user: CurrentContactType,\r\n  key: number,\r\n  handleCurrentContact: (clickedContact: CurrentContactType) => void,\r\n}\r\n\r\nconst Contact: React.FC<Props> = ({ user, handleCurrentContact}) => {\r\n\r\n  return (\r\n  <div \r\n    className='userContact'\r\n    tabIndex={0}\r\n    onClick={() => handleCurrentContact(user)}\r\n  >\r\n    {user.firstName} {user.lastName}\r\n  </div>\r\n)}\r\n\r\nexport default Contact;","\r\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\r\nimport Button from '@material-ui/core/Button'\r\n\r\ntype Props = {\r\n  handleOpen: () => void\r\n}\r\n\r\nconst AddBtn: React.FC<Props> = ({ handleOpen }) => {\r\n\r\n  return (\r\n    <Button onClick={handleOpen}>\r\n      <AddCircleIcon fontSize=\"large\"/>\r\n    </Button>\r\n  )\r\n}\r\n\r\nexport default AddBtn;\r\n","import './List.css'\r\nimport AddBtn from '../AddBtn'\r\n\r\ntype Props = {\r\n  children: any,\r\n  handleOpen: (boolean:boolean) => void\r\n}\r\n\r\nconst List: React.FC<Props> = ({ children, handleOpen }) => {\r\n\r\n  return (\r\n    <div className='list'>\r\n      <div className='listHead'>\r\n        <h1>Contacts</h1>\r\n        <AddBtn handleOpen={() => handleOpen(true)}/>\r\n      </div>\r\n      {children}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default List;\r\n","import axios from 'axios'\r\nimport { UserDataType, CurrentContactType, NewContactType } from '../App'\r\n\r\nconst getContacts = async (): Promise<UserDataType> => {\r\n  try {\r\n    return await axios.get('https://avb-contacts-api.herokuapp.com/contacts/paginated');\r\n  } \r\n  catch(err) {\r\n    throw(err)\r\n  }\r\n}\r\n\r\nconst addContact = async (newContact: NewContactType): Promise<UserDataType> => {\r\n  const headers = {\r\n    \"accept\": \"application/json\",\r\n    \"Content-Type\": \"application/json\"\r\n  }\r\n  try {\r\n    return await axios.post('https://avb-contacts-api.herokuapp.com/contacts', newContact, {\r\n      headers: headers\r\n    })\r\n  } catch (err) {\r\n    throw err\r\n  }\r\n}\r\n\r\nconst editContact = async(id: number, editContactData: CurrentContactType): Promise<UserDataType[]> => {\r\n  try {\r\n    return await axios.put(`https://avb-contacts-api.herokuapp.com/contacts/${id}`, editContactData)\r\n  } catch(err) {\r\n    throw(err)\r\n  }\r\n}\r\n\r\nconst deleteContact = async(id: number): Promise<UserDataType[]> => {\r\n  try {\r\n    return await axios.delete(`https://avb-contacts-api.herokuapp.com/contacts/${id}`)\r\n  } catch (err) {\r\n    throw err\r\n  }\r\n}\r\n\r\nexport { getContacts, editContact, addContact, deleteContact }","import './Display.css'\r\nimport { CurrentContactType } from '../../App'\r\nimport { editContact, deleteContact } from '../../utils/API'\r\nimport CancelIcon from '@material-ui/icons/Cancel';\r\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\r\n\r\ntype Props = {\r\n  currentContact: CurrentContactType,\r\n  setCurrentContact: (obj: CurrentContactType) => void,\r\n  handleOpenEmail: (boolean:boolean) => void\r\n}\r\nconst Display: React.FC<Props> = ({ currentContact, setCurrentContact, handleOpenEmail }) => {\r\n  const contactEmail = currentContact.emails\r\n\r\n  const handleEditForm = (e: any) => {\r\n    e.preventDefault();\r\n    editContact(currentContact.id, currentContact).then(res => {\r\n      window.location.reload();\r\n    }).catch(err => {\r\n      console.log(err)\r\n    })\r\n    setCurrentContact({\r\n      id: 0,\r\n      firstName: \"\",\r\n      lastName: \"\",\r\n      emails: [\"\"]\r\n    })\r\n  }\r\n\r\n  const handleDeleteContact = () => {\r\n    deleteContact(currentContact.id).then(res => {\r\n      console.log(res)\r\n      setCurrentContact({\r\n        id: 0,\r\n        firstName: \"\",\r\n        lastName: \"\",\r\n        emails: [\"\"]\r\n      })\r\n      window.location.reload();\r\n    }).catch(err => {\r\n      console.log(err)\r\n    })\r\n  }\r\n\r\n  if (currentContact.firstName === \"\"){\r\n    return (\r\n      <div className='mainDisplay' key={currentContact.id}>\r\n        <h1>CRUD - And Company</h1>\r\n        <div className='startDisplay'>\r\n          <div>\r\n            <h1>Don't Be Shy, Click a Contact</h1>\r\n            <p>All Names are Subject to Review</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  } else {\r\n    return (\r\n      <div className='mainDisplay' key={currentContact.id}>\r\n        <form onSubmit={handleEditForm} className='editContactForm'>\r\n          <div className='editName'>\r\n            <div className='firstNameBox'>\r\n              <h6>First Name</h6>\r\n              <input className='nameInput' value={currentContact.firstName} onChange={(e) => setCurrentContact({ ...currentContact, firstName: e.target.value})}></input>\r\n            </div>\r\n            <div className='lastNameBox'>\r\n              <h6>Last Name</h6>\r\n              <input className='nameInput' value={currentContact.lastName} onChange={(e) => setCurrentContact({ ...currentContact, lastName: e.target.value})}></input>\r\n            </div>\r\n          </div>\r\n          <div className='contactEmails'>\r\n            <h6>Emails</h6>\r\n              {currentContact.emails.map((email, emailIdx) =>\r\n                emailIdx===0?\r\n                <p key={emailIdx} className='emailGrp'>\r\n                  {email}\r\n                  <button \r\n                  type='button'\r\n                  className='btn'\r\n                  key={emailIdx}\r\n                  onClick={(e:any) => {\r\n                      contactEmail.shift()\r\n                      setCurrentContact({...currentContact, emails: contactEmail})\r\n                    }\r\n                  }\r\n                  >\r\n                    <CancelIcon fontSize='small'/>\r\n                  </button>\r\n                  </p>\r\n                  :<p key={emailIdx}>{email}</p>\r\n              )}\r\n            <button type='button' className='btn addEmlBtn' onClick={() => handleOpenEmail(true)}><AddCircleIcon fontSize='medium'/>add email</button>\r\n          </div>\r\n          <div className='btnGroup'>\r\n          <button type='button' className='btn deleteBtn' key={currentContact.id} onClick={handleDeleteContact}>Delete</button>\r\n          <div className='cancelSave'>\r\n          <button \r\n            type='button' \r\n            className='btn cancelBtn' \r\n            onClick={() => {setCurrentContact({\r\n              id: 0,\r\n              firstName: \"\",\r\n              lastName: \"\",\r\n              emails: [\"\"]\r\n            })}}\r\n            >\r\n            Cancel</button>\r\n          <button type='submit' className='btn saveBtn'>Save</button>\r\n          </div>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Display;","import { useState } from 'react'\r\nimport './AddContactModal.css'\r\nimport { CurrentContactType } from '../../App'\r\nimport { addContact } from '../../utils/API'\r\nimport AddCircleIcon from '@material-ui/icons/AddCircle'\r\n\r\ntype Props = {\r\n  openContact: boolean,\r\n  currentContact: CurrentContactType,\r\n  handleClose: (boolean:boolean) => void,\r\n}\r\n\r\nconst AddContactModal: React.FC<Props> = ({ handleClose, openContact }) => {\r\n\r\n  const [newContact, setNewContact] = useState({\r\n    firstName: \"\",\r\n    lastName: \"\",\r\n    emails: [\"\"]\r\n  })\r\n  const [newEmail, setNewEmail] = useState(\"\")\r\n  const pushEmail = () => {\r\n    let pushEmailArray = newContact.emails;\r\n    pushEmailArray.push(newEmail)\r\n    if(pushEmailArray[0] === \"\") {\r\n      pushEmailArray.shift()\r\n    }\r\n    setNewContact({...newContact, emails: pushEmailArray})\r\n  }\r\n\r\n  const handleFormSubmit = (e: any) => {\r\n    e.preventDefault();\r\n    addContact(newContact).then(res => {\r\n      console.log(res)\r\n      handleClose(true)\r\n      window.location.reload();\r\n    }).catch(err => {\r\n      console.log(err)\r\n    })\r\n  }\r\n\r\n  const cancelAdd = () => {\r\n    handleClose(false);\r\n    setNewContact({\r\n      firstName: \"\",\r\n      lastName: \"\",\r\n      emails: []\r\n    })\r\n    setNewEmail(\"\")\r\n  }\r\n  \r\n  if(!openContact) {\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <div className='contactModal'>\r\n      <div className='modal-content'>\r\n        <div className='modal-header'>\r\n          <h1 className='modal-title'>Add Contact</h1>\r\n        </div>\r\n        <form onSubmit={handleFormSubmit} className='addContactForm'>\r\n          <div className=\"modal-body\">\r\n            <p>First Name</p>\r\n            <input\r\n              type=\"text\"\r\n              name=\"firstName\"\r\n              className=\"modalInput\"\r\n              value={newContact.firstName}\r\n              onChange={(e) => setNewContact({...newContact, firstName: e.target.value})}\r\n              required\r\n            />\r\n            <p>Last Name</p>\r\n            <input\r\n              type=\"text\"\r\n              name=\"lastName\"\r\n              className=\"modalInput\"\r\n              value={newContact.lastName}\r\n              onChange={(e) => setNewContact({...newContact, lastName: e.target.value})}\r\n              required\r\n            />\r\n            <p>Email</p>\r\n            <input\r\n              type=\"text\"\r\n              name=\"email\"\r\n              className=\"modalInput\"\r\n              value={newEmail}\r\n              onChange={(e) => setNewEmail(e.target.value)}\r\n              required\r\n            />\r\n            {newContact.emails.map((email, emailIdx) => <p key={emailIdx}>{email}</p>)}\r\n            <button \r\n              type='button' \r\n              className='btn addEmlBtn' \r\n              onClick={() => pushEmail()}\r\n            >\r\n              <AddCircleIcon fontSize='medium'/>\r\n              Add Email\r\n            </button>\r\n          </div>\r\n          <div className=\"modal-footer\">\r\n            <button \r\n              type=\"submit\"\r\n              className=\"btn mainAddBtn\"\r\n              >Add Contact</button>\r\n            <button \r\n              className='btn closeBtn'\r\n              onClick={() => cancelAdd()}\r\n            >\r\n              Close\r\n            </button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default AddContactModal;","import { useState } from 'react'\r\nimport './AddEmailModal.css'\r\nimport { CurrentContactType } from '../../App'\r\n\r\ntype Props = {\r\n  openEmail: boolean,\r\n  setOpenEmail: (boolean:boolean) => void,\r\n  currentContact: CurrentContactType,\r\n  setCurrentContact: (object: CurrentContactType) => void\r\n}\r\n\r\nconst AddEmailModal:React.FC<Props> = ({ setOpenEmail, openEmail, currentContact, setCurrentContact }) => {\r\n  const [newEmail, setNewEmail] = useState(\"\")\r\n  const pushEmail = () => {\r\n    let pushEmailArray = currentContact.emails;\r\n    pushEmailArray.push(newEmail)\r\n    setCurrentContact({...currentContact, emails: pushEmailArray})\r\n  }\r\n  const handleClose = () => {\r\n    setOpenEmail(false)\r\n    setNewEmail(\"\")\r\n  }\r\n  if(!openEmail) {\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <div className='emailModal'>\r\n      <div className='modal-content'>\r\n        <div className='modal-header'>\r\n          <h1 className='modal-title'>Add Email</h1>\r\n        </div>\r\n        <div className=\"modal-body\">\r\n          {currentContact.emails.map((email, emailIdx) => (\r\n            <p key={emailIdx}>{email}</p>\r\n          ))}\r\n\r\n          <input type=\"text\" className='modalInput' value={newEmail} onChange={e => setNewEmail(e.target.value)}/>\r\n        </div>\r\n        <div className=\"modal-footer eml-modal-footer\">\r\n          <button \r\n            className='btn mainAddBtn'\r\n            onClick={() => pushEmail()}>Add Email</button>\r\n          <button \r\n            className='btn closeBtn'\r\n            onClick={() => handleClose()}\r\n            >\r\n            Close\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default AddEmailModal","import { useState, useEffect } from 'react'\nimport { BrowserRouter as Router, Route } from 'react-router-dom'\nimport Wrapper from './components/Wrapper'\nimport Contact from './components/Contact'\nimport List from './components/List'\nimport Display from './components/Display'\nimport ContactModal from './components/AddContactModal'\nimport EmailModal from './components/AddEmailModal'\n\nimport { getContacts }  from './utils/API'\n\n//Types\n\nexport type UserDataType = {\n  data: any,\n  id: number,\n  firstName: string,\n  lastName: string,\n  emails: Array<string>,\n}\n\nexport type CurrentContactType = {\n  id: number,\n  firstName: string,\n  lastName: string,\n  emails: Array<string>,\n}\n\nexport type NewContactType = {\n  firstName: string,\n  lastName: string,\n  emails: Array<string>\n}\n\nfunction App() {\n  const [userData, setUserData] = useState([] as UserDataType[])\n  const [currentContact, setCurrentContact] = useState({\n    id: 0,\n    firstName: \"\",\n    lastName: \"\",\n    emails: [\"\"]\n  })\n\n  const sortedData = (a:any, b:any) => {\n    const userA = a.firstName.toUpperCase();\n    const userB = b.firstName.toUpperCase();\n    \n    if (userA > userB) {\n      return 1;\n    } else if (userA < userB) {\n      return -1;\n    }\n    return 0\n  }\n  const sortedDataArray = userData.sort(sortedData);\n  console.log(sortedDataArray)\n  \n  const handleCurrentContact = (clickedContact: CurrentContactType) => {\n    for (const user of userData) {\n      if (clickedContact.id === user.id) {\n        setCurrentContact(user)\n      }\n    }\n    return {...clickedContact}\n  }\n\n  const [openContact, setOpenContact] = useState(false)\n  const [openEmail, setOpenEmail] = useState(false)\n\n  useEffect(() => {\n    getContacts().then(res => {\n      setUserData(res.data.contacts)\n    })\n  }, []) \n\n\n\n  return (\n    <Router>\n    <div className=\"App\">\n      <Route exact path='/'>\n      <Wrapper>\n        <List\n          handleOpen={() => setOpenContact(true)}\n        >\n          \n          {sortedDataArray.map((user: UserDataType, userIdx) => {\n            return (\n            <Contact\n              key={userIdx}\n              user={user}\n              handleCurrentContact={handleCurrentContact}\n            />\n            )})}\n        </List>\n        <Display\n          currentContact={currentContact}\n          setCurrentContact={setCurrentContact}\n          handleOpenEmail={() => setOpenEmail(true)}\n        > \n        </Display>\n        <ContactModal\n          currentContact={currentContact}\n          handleClose={() => setOpenContact(false)}\n          openContact={openContact}\n        />\n        <EmailModal \n          setOpenEmail={setOpenEmail}\n          openEmail={openEmail}\n          currentContact={currentContact}\n          setCurrentContact={setCurrentContact}\n        />\n      </Wrapper>\n      </Route>\n    </div>\n    </Router>\n  );\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\nimport \"./index.css\"\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}